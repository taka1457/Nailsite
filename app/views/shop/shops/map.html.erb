<div class="row">
	<div class="col-md-offset-2">
		<h2>
			おすすめ順
			<span class="sub_title"> (全<%= @shops.total_count %>件)　　　<%= paginate @shops %></span>
			<%= link_to 'リスト表示', shops_path, class: "btn btn-default nav-btn" %>
		</h2>
	</div>
</div>
<div class="row">
	<div class="col-md-2">
		<table class="table table-bordered">
			<tbody>
				<tr>
					<td class="table_item_color">ジャンル検索</td>
				</tr>
				<% @shops.each do |shop| %>
					<tr>
						<td><%= shop.genre_i18n %></td>
					</tr>
				<% end %>
			</tbody>
		</table>
	</div>
	<div class="col-md-10">
		<div class="col-md-7">
			<div id='map'></div>
		</div>
		<div class="col-md-5 scroll">
			<table class="table">
				<tbody>
					<% @shops.each do |shop| %>
						<tr>
							<td>
								<%= link_to shop_path(shop) do %>
									<div><%= shop.name %></div>
								<% end %>
								<div class="row">
									<div class="col-md-4">
										<%= link_to shop_path(shop) do %>
						        	<%= attachment_image_tag shop, :shop_image, format: "jpeg", fallback: "no-image.png", class: "map_shop_image" %>
						        <% end %>
					      	</div>
					      	<div class="col-md-8">
										<%= shop.promotion %>
									</div>
								</div>
								<div class="col-md-12" >
									<%= shop.full_address %>
								</div><br>
							</td>
						</tr>
					<% end %>
				</tbody>
			</table>
		</div>
	</div>
</div>

<style>
#map{
  height: 500px;
  width: 550px;
}
</style>

<script>

let map
let geocoder
let marker = []; // マーカーを複数表示させたいので、配列化
let infoWindow = []; // 吹き出しを複数表示させたいので、配列化
const shops = gon.shops; // コントローラーで定義したインスタンス変数を変数に代入

function initMap(){
  // geocoderを初期化
  geocoder = new google.maps.Geocoder()
  // mapの初期位置設定
  map = new google.maps.Map(document.getElementById('map'), {
  center: {lat: 34.7024, lng: 135.4959},
  zoom: 15
  });
  // forは繰り返し処理
	for (let i = 0; i < shops.length; i++) {
		// geocoderで addressの経緯緯度取得
	  geocoder.geocode( { 'address': shops[i].prefecture_code + shops[i].city + shops[i].street }, function(results, status) {
	  	// statusがOKであれば
	    if (status == 'OK') {
	　　　　// map.setCenterで地図が移動
	      map.setCenter(results[0].geometry.location);
	      marker[i] = new google.maps.Marker({
	          map: map,
	          position: results[0].geometry.location
	      });
	      let id = shops[i]['id']
	      infoWindow[i] = new google.maps.InfoWindow({
	        content: `<a href='/shops/${id}'>${shops[i].name}</a>`
	      });
	      marker[i].addListener("click", function(){
	      	infoWindow[i].open(map, marker[i]);
	      });
	    } else {
	      alert('Geocode was not successful for the following reason: ' + status);
	    }
	  });
	}
}

function codeAddress(){
  // 入力を取得
  let inputAddress = document.getElementById('address').value;
  // geocodingしたあとmapを移動
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['SECRET_KEY'] %>&callback=initMap" async defer></script>

